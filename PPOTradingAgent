{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.nn.functional as F"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "class CNNTradingAgent(nn.Module):\n",
    "    def __init__(self):\n",
    "        super().__init__()\n",
    "        \n",
    "        # If `True`, switch the network into evaluation mode when the batch size of the input is 1.\n",
    "        # This is to avoid BatchNorm error when taking a single batch of input.\n",
    "        self._auto_detect_single_batch = True\n",
    "        \n",
    "        # Bottleneck idea from Google's MobileNetV2\n",
    "        \n",
    "        # N * 256 * 16\n",
    "        # x.transpose(-1, -2).contiguous().unsqueeze(-1)\n",
    "        # N * 16 * 256 * 1\n",
    "        self.conv0 = nn.Sequential(\n",
    "            nn.LayerNorm([256, 1]),\n",
    "            nn.Conv2d(16, 32, kernel_size=(3, 1), stride=(2, 1), padding=(1, 0)),\n",
    "            nn.BatchNorm2d(32)\n",
    "        )\n",
    "        # N * 32 * 128 * 1\n",
    "        self.bottleneck0 = nn.Sequential(\n",
    "            nn.Conv2d(32, 192, kernel_size=1),\n",
    "            nn.BatchNorm2d(192),\n",
    "            nn.ReLU6(),\n",
    "            nn.Conv2d(192, 192, kernel_size=(3, 1), stride=(2, 1), padding=(1, 0), groups=192),\n",
    "            nn.BatchNorm2d(192),\n",
    "            nn.ReLU6(),\n",
    "            nn.Conv2d(192, 64, kernel_size=1),\n",
    "            nn.BatchNorm2d(64),\n",
    "            nn.AvgPool2d(kernel_size=(2, 1))\n",
    "        )\n",
    "        # N * 64 * 32 * 1\n",
    "        self.bottleneck1 = nn.Sequential(\n",
    "            nn.Conv2d(64, 384, kernel_size=1),\n",
    "            nn.BatchNorm2d(384),\n",
    "            nn.ReLU6(),\n",
    "            nn.Conv2d(384, 384, kernel_size=(3, 1), stride=(2, 1), padding=(1, 0), groups=384),\n",
    "            nn.BatchNorm2d(384),\n",
    "            nn.ReLU6(),\n",
    "            nn.Conv2d(384, 128, kernel_size=1),\n",
    "            nn.BatchNorm2d(128),\n",
    "            nn.AvgPool2d(kernel_size=(2, 1))\n",
    "        )\n",
    "        # N * 128 * 8 * 1\n",
    "        self.conv1 = nn.Sequential(\n",
    "            nn.Conv2d(128, 512, kernel_size=1),\n",
    "            nn.BatchNorm2d(512),\n",
    "            nn.AvgPool2d(kernel_size=(8, 1))\n",
    "        )\n",
    "        # N * 512 * 1 * 1\n",
    "        self.conv2 = nn.Conv2d(512, 3, kernel_size=1)\n",
    "        \n",
    "        self.softmax = nn.Softmax(dim=1)\n",
    "        \n",
    "    def forward(self, x):\n",
    "        if self._auto_detect_single_batch and self.training and x.size(0) == 1:\n",
    "            switched = True\n",
    "            self.eval()\n",
    "        else:\n",
    "            switched = False\n",
    "        \n",
    "        x = x.transpose(-1, -2).unsqueeze(-1)\n",
    "        x = self.conv0(x)\n",
    "        x = self.bottleneck0(x)\n",
    "        x = self.bottleneck1(x)\n",
    "        x = self.conv1(x)\n",
    "        x = self.conv2(x)\n",
    "        x = x.view(-1, 3)\n",
    "        x = self.softmax(x)\n",
    "        \n",
    "        if switched:\n",
    "            self.train()\n",
    "        \n",
    "        return x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "class RNNTradingAgent(nn.Module):\n",
    "    def __init__(self):\n",
    "        super().__init__()\n",
    "        \n",
    "        # If `True`, switch the network into evaluation mode when the batch size of the input is 1.\n",
    "        # This is to avoid BatchNorm error when taking a single batch of input.\n",
    "        self._auto_detect_single_batch = True\n",
    "        \n",
    "        # N * 256 * 16\n",
    "        # x.transpose(-1, -2)\n",
    "        # N * 16 * 256\n",
    "        self.ln = nn.LayerNorm(256)\n",
    "        # x.transpose(-1, -2)\n",
    "        # N * 256 * 16\n",
    "        self.fc_in = nn.Linear(16, 32)\n",
    "        # N * 256 * 32\n",
    "        self.rnn = nn.GRU(input_size=32, hidden_size=64, num_layers=2, batch_first=True, bidirectional=True)\n",
    "        # N * 256 * 128\n",
    "        self.fc_out = nn.Linear()\n",
    "        \n",
    "        self nn.Module.register_parameter('init_hidden', torch.zeros(2 * 2, ))\n",
    "\n",
    "        self.softmax = nn.Softmax(dim=1)\n",
    "        \n",
    "    def forward(self, x):\n",
    "        if self._auto_detect_single_batch and self.training and x.size(0) == 1:\n",
    "            switched = True\n",
    "            self.eval()\n",
    "        else:\n",
    "            switched = False\n",
    "            \n",
    "        h = x.new_zeros(2 * 2, x.size(0), 64)\n",
    "        \n",
    "        x = self.conv0(x)\n",
    "        x = self.bottleneck0(x)\n",
    "        x = self.bottleneck1(x)\n",
    "        x = self.conv1(x)\n",
    "        x = self.conv2(x)\n",
    "        x = x.view(-1, 3)\n",
    "        x = self.softmax(x)\n",
    "        \n",
    "        if switched:\n",
    "            self.train()\n",
    "        \n",
    "        return x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "model = CNNTradingAgent()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "CNNTradingAgent(\n",
       "  (conv0): Sequential(\n",
       "    (0): LayerNorm(torch.Size([256, 1]), eps=1e-05, elementwise_affine=True)\n",
       "    (1): Conv2d(16, 32, kernel_size=(3, 1), stride=(2, 1), padding=(1, 0))\n",
       "    (2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "  )\n",
       "  (bottleneck0): Sequential(\n",
       "    (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1))\n",
       "    (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "    (2): ReLU6()\n",
       "    (3): Conv2d(192, 192, kernel_size=(3, 1), stride=(2, 1), padding=(1, 0), groups=192)\n",
       "    (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "    (5): ReLU6()\n",
       "    (6): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1))\n",
       "    (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "    (8): AvgPool2d(kernel_size=(2, 1), stride=(2, 1), padding=0)\n",
       "  )\n",
       "  (bottleneck1): Sequential(\n",
       "    (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1))\n",
       "    (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "    (2): ReLU6()\n",
       "    (3): Conv2d(384, 384, kernel_size=(3, 1), stride=(2, 1), padding=(1, 0), groups=384)\n",
       "    (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "    (5): ReLU6()\n",
       "    (6): Conv2d(384, 128, kernel_size=(1, 1), stride=(1, 1))\n",
       "    (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "    (8): AvgPool2d(kernel_size=(2, 1), stride=(2, 1), padding=0)\n",
       "  )\n",
       "  (conv1): Sequential(\n",
       "    (0): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1))\n",
       "    (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "    (2): AvgPool2d(kernel_size=(8, 1), stride=(8, 1), padding=0)\n",
       "  )\n",
       "  (conv2): Conv2d(512, 3, kernel_size=(1, 1), stride=(1, 1))\n",
       "  (softmax): Softmax()\n",
       ")"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tensor([[[ 1.6086,  1.0247,  0.8554,  ...,  0.0395,  2.3656, -1.0874],\n",
      "         [ 0.2770,  0.8557,  0.4668,  ...,  0.2226,  0.9344,  0.7121],\n",
      "         [-0.2932,  0.2818,  0.4620,  ...,  2.1147, -1.9017,  0.8169],\n",
      "         ...,\n",
      "         [-0.0395,  1.5317,  0.5689,  ..., -1.0811,  0.1842, -0.6972],\n",
      "         [ 0.6453,  0.9932,  1.3931,  ..., -0.0586,  0.0549,  0.4356],\n",
      "         [ 0.2619, -1.7053,  0.1622,  ...,  0.2687, -0.4136,  0.0930]],\n",
      "\n",
      "        [[ 0.1257, -0.4109, -0.0192,  ...,  1.0087,  0.6787, -0.2372],\n",
      "         [-1.7194,  0.1472,  1.4590,  ...,  1.2508,  1.2125,  0.1135],\n",
      "         [-1.0114, -0.0751, -0.7786,  ..., -0.8571,  1.3649,  0.3910],\n",
      "         ...,\n",
      "         [-0.3882, -2.8003, -0.7627,  ...,  0.0135,  1.1887, -0.2866],\n",
      "         [ 1.3291, -0.5450,  0.3006,  ..., -0.8672,  0.8090,  0.0489],\n",
      "         [-0.0511, -1.1801, -0.7393,  ..., -0.1444, -0.3574, -0.0697]],\n",
      "\n",
      "        [[ 1.4249,  0.7177, -0.3779,  ..., -1.6122, -3.0001, -0.3684],\n",
      "         [-0.1546, -0.5691,  1.4686,  ..., -0.7766, -0.2078,  1.4711],\n",
      "         [-0.0889,  0.5825,  0.9730,  ..., -0.4407,  0.1445,  1.2861],\n",
      "         ...,\n",
      "         [ 0.7788,  1.0803, -1.3182,  ..., -0.4151, -0.7477, -0.2769],\n",
      "         [ 0.3004, -1.2062, -0.4055,  ..., -0.7654, -0.3914, -1.1874],\n",
      "         [-0.5296, -0.6093,  0.2338,  ..., -0.9489,  1.5302, -0.7289]]])\n"
     ]
    }
   ],
   "source": [
    "toy_input = torch.randn(3, 256, 16)\n",
    "print(toy_input)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[0.3328, 0.3400, 0.3272],\n",
       "        [0.3658, 0.2747, 0.3595],\n",
       "        [0.3201, 0.3514, 0.3285]], grad_fn=<SoftmaxBackward>)"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model(toy_input)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "RL",
   "language": "python",
   "name": "rl"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
